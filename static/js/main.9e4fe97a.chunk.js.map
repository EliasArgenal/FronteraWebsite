{"version":3,"sources":["logo.svg","firebase-config.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","getFirestore","App","email","setEmail","useState","password","setPassword","isRegistering","setIsRegistering","isLoggedIn","setIsLoggedIn","errorMessage","setErrorMessage","React","createElement","className","src","logo","alt","type","placeholder","value","onChange","e","target","onClick","async","createUserWithEmailAndPassword","alert","error","message","signInWithEmailAndPassword","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sPCQxC,MAWMC,EAAMC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,6CACZC,UAAW,6BACXC,cAAe,yCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOXC,EAAOC,YAAQV,GACVW,YAAaX,wBC0ETY,MA3Ff,WACE,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAUC,GAAeF,mBAAS,KAClCG,EAAeC,GAAoBJ,oBAAS,IAC5CK,EAAYC,GAAiBN,oBAAS,IACtCO,EAAcC,GAAmBR,mBAAS,IAwBjD,OACES,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAGvCT,EA2BAI,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,UAAI,6BACJD,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,UAAI,oBACJD,IAAAC,cAAA,SAAG,sBACHD,IAAAC,cAAA,SAAG,wCAGLD,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,iCACJD,IAAAC,cAAA,UAAI,oCACJD,IAAAC,cAAA,UAAI,mCAIRD,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,cAAQ,kBACRD,IAAAC,cAAA,cAAQ,aACRD,IAAAC,cAAA,cAAQ,qBA9CZD,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAKP,EAAgB,UAAY,SAChCI,GAAgBE,IAAAC,cAAA,KAAGC,UAAU,SAASJ,GAEvCE,IAAAC,cAAA,SACEK,KAAK,QACLC,YAAY,QACZC,MAAOnB,EACPoB,SAAWC,GAAMpB,EAASoB,EAAEC,OAAOH,SAErCR,IAAAC,cAAA,SACEK,KAAK,WACLC,YAAY,WACZC,MAAOhB,EACPiB,SAAWC,GAAMjB,EAAYiB,EAAEC,OAAOH,SAGxCR,IAAAC,cAAA,UAAQW,QAASlB,EAlCNmB,UACnB,UACQC,YAA+B7B,EAAMI,EAAOG,GAClDK,GAAc,GACdkB,MAAM,gCACN,MAAOC,GACPjB,EAAgBiB,EAAMC,WAjBNJ,UAClB,UACQK,YAA2BjC,EAAMI,EAAOG,GAC9CK,GAAc,GACdkB,MAAM,0BACN,MAAOC,GACPjB,EAAgBiB,EAAMC,YAwCbvB,EAAgB,UAAY,SAG/BM,IAAAC,cAAA,UAAQW,QAASA,IAAMjB,GAAkBD,IACtCA,EAAgB,kCAAoC,gCCpDpDyB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC/C,EAAAoC,EAAA,GAAAY,KAAAhD,EAAAiD,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,YCADU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlC,IAAAC,cAACD,IAAMmC,WAAU,KACfnC,IAAAC,cAACb,EAAG,QAOR+B","file":"static/js/main.9e4fe97a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","// Import the functions you need from the Firebase SDKs\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";   // For Firebase Authentication\nimport { getFirestore } from \"firebase/firestore\";  // For Firestore (database)\n// Optionally, you can import Analytics if you plan to use it\n// import { getAnalytics } from \"firebase/analytics\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAWM2UiQMIGJUX0r7iULsSZ-UCxaK_YmKY\",\n  authDomain: \"personal-finance-app-2d328.firebaseapp.com\",\n  projectId: \"personal-finance-app-2d328\",\n  storageBucket: \"personal-finance-app-2d328.appspot.com\",\n  messagingSenderId: \"455906612173\",\n  appId: \"1:455906612173:web:cd5801a8c448c7d2926a84\",\n  measurementId: \"G-C21C9QW54D\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nconst auth = getAuth(app);  // This is for Firebase Authentication\nconst db = getFirestore(app);  // This is for Firestore database\n\n// Optionally, initialize Analytics if you plan to use it\n// const analytics = getAnalytics(app);\n\nexport { auth, db };  // Export these services to use them in your app\n","import React, { useState } from 'react';\nimport './App.css';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from './firebase-config'; // Firebase config\nimport logo from './logo.svg'; // You can use a banking-related logo instead of React's\n\nfunction App() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // State to track login status\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Handle user login\n  const handleLogin = async () => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      setIsLoggedIn(true); // Set user as logged in\n      alert('Logged in successfully');\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n\n  // Handle user registration (sign-up)\n  const handleSignUp = async () => {\n    try {\n      await createUserWithEmailAndPassword(auth, email, password);\n      setIsLoggedIn(true); // Automatically log in after sign-up\n      alert('Account created successfully');\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \n        {/* Conditional rendering: Show login/signup form if not logged in, else show dashboard */}\n        {!isLoggedIn ? (\n          <div>\n            <h2>{isRegistering ? 'Sign Up' : 'Login'}</h2>\n            {errorMessage && <p className=\"error\">{errorMessage}</p>}\n\n            <input\n              type=\"email\"\n              placeholder=\"Email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <button onClick={isRegistering ? handleSignUp : handleLogin}>\n              {isRegistering ? 'Sign Up' : 'Login'}\n            </button>\n\n            <button onClick={() => setIsRegistering(!isRegistering)}>\n              {isRegistering ? 'Already have an account? Log in' : 'Need an account? Sign up'}\n            </button>\n          </div>\n        ) : (\n          <div className=\"dashboard\">\n            <h2>Welcome to Your Dashboard</h2>\n            <div className=\"account-info\">\n              <h3>Account Overview</h3>\n              <p>Balance: $5,000.00</p>\n              <p>Account Number: 1234-5678-9101-1121</p>\n            </div>\n\n            <div className=\"transactions\">\n              <h3>Recent Transactions</h3>\n              <ul>\n                <li>Deposit: $500 on Oct 19, 2024</li>\n                <li>Withdrawal: $100 on Oct 18, 2024</li>\n                <li>Payment: $150 on Oct 17, 2024</li>\n              </ul>\n            </div>\n\n            <div className=\"actions\">\n              <button>Transfer Funds</button>\n              <button>Pay Bills</button>\n              <button>View Statements</button>\n            </div>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/tailwind.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}